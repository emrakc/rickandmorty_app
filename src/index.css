body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
/* width */
::-webkit-scrollbar {
  width: 15px;
}

/* Track */
::-webkit-scrollbar-track {
  background: #fff; 
}
 
/* Handle */
::-webkit-scrollbar-thumb {
  background: #282c34; 
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #c7c7c7; 
}

.selected-menu-item {
   border-left:10px solid red 
}


/* 
import React, { useState, useEffect, useRef } from 'react'
import { gql, useQuery } from '@apollo/client';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import Avatar from '@material-ui/core/Avatar';
import { makeStyles } from '@material-ui/core/styles';
import InfiniteScroll from 'react-infinite-scroller';
import { useSpring, animated } from 'react-spring'
import { useHistory } from "react-router-dom";
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import CardMedia from '@material-ui/core/CardMedia';
import Grid from '@material-ui/core/Grid';

const GET_CHARS_QUERY = gql`
query AllCharacters($page: Int){
    characters(page: $page) {
      info {
        count
        pages
        next
        prev
      }
     results {
         id
         status
         name
        image
     }
    }
  }
`;

const useStyles = makeStyles((theme) => ({
    root: {
        display: 'flex',
    },
    content: {
        flexGrow: 1,
        padding: theme.spacing(3),
    },
    selected: {
        borderRight: "10px solid red"
    }
    ,
    card: {
        display: 'flex',
        flexDirection: 'row'
    }
}));

const CharacterList = (props) => {
    const { data, error, loading, fetchMore } = useQuery(
        GET_CHARS_QUERY
    )
    const classes = useStyles();
    const open = true;


    let characters = data?.characters.results || [];

    const onUpdate = (prev, { fetchMoreResult }) => {
        if (!fetchMoreResult) return prev;
        const info = fetchMoreResult.characters.info;
        const results = [
            ...prev.characters.results,
            ...fetchMoreResult.characters.results,
        ];
        return Object.assign({}, prev, {
            characters: {
                __typename: "Characters",
                results,
                info,
            },
        });
    };

    function handleCharacterChange(id) {
        alert(id)
    }

    const getNewCharacters = async () => {
        if (data) {
            return await fetchMore({
                variables: {
                    page: data.characters.info.next,
                },
                updateQuery: onUpdate,
            });
        }
    };

    return (
        <> 
                {loading && <p style={{ direction: 'ltr' }}>Loading...</p>}
                {error && <p >!--Error--!</p>}
                <div style={{display:'flex',flexDirection:'column'}} >
                {
                   

               
                    characters
                        ? characters.map((char, i) => (
                            <MenuItem
                                key={char.id}
                                order={i}
                                onCharacherChange={handleCharacterChange}
                                {...char}
                            />
                        ))
                        : null
                } 
                </div>

        </>
    );
};

const MenuItem = ({ name, status, image, id, order, selected, onCharacherChange }) => {
    const classes = useStyles();
    let history = useHistory();
    const props = useSpring({
        to: { opacity: 1, bottom: '0', position: 'relative' },
        from: { opacity: 0, bottom: '-40px', position: 'relative' },
        delay: 170 * (order % 20)
    })

    return (
        <animated.div style={props} >
            
            <Grid item xs={12}>
                    <Card className={classes.card}>
                        <CardMedia 
                            component="img"
                            alt="Contemplative Reptile"
                            height="200"
                            style={{maxWidth:'150px'}}
                            image={image}
                            title="Contemplative Reptile"
                        />
                        <CardContent>
                            <Typography gutterBottom variant="h4"  >      #{id}       </Typography>
                            <Typography gutterBottom variant="h3"  >  {name}    </Typography> 
                        </CardContent>
                    </Card>
                </Grid>
        </animated.div>
    )
}

export default CharacterList; */